name: CI

on:
  push:
    branches:
      - develop
  pull_request:

concurrency:
  group: develop-frutter_cicd-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    name: Server

    services:
      redis-cache:
        image: redis:alpine
        ports:
          - 13000:6379
      redis-queue:
        image: redis:alpine
        ports:
          - 11000:6379
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mariadb-admin ping" --health-interval=5s --health-timeout=2s --health-retries=3

    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*requirements.txt', '**/pyproject.toml', '**/setup.py', '**/setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: 'echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT'

      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install MariaDB Client
        run: sudo apt-get install mariadb-client-10.6

      - name: Setup
        run: |
          pip install frappe-bench
          bench init --skip-redis-config-generation --skip-assets --python "$(which python)" ~/frappe-bench
          mariadb --host 127.0.0.1 --port 3306 -u root -proot -e "SET GLOBAL character_set_server = 'utf8mb4'"
          mariadb --host 127.0.0.1 --port 3306 -u root -proot -e "SET GLOBAL collation_server = 'utf8mb4_unicode_ci'"

      - name: Install pytest and dependencies
        run: |
          python -m pip install pytest pytest-cov

      - name: Install
        working-directory: /home/runner/frappe-bench
        run: |
          bench get-app frutter_cicd $GITHUB_WORKSPACE
          bench setup requirements --dev
          bench new-site --db-root-password root --admin-password admin test_site
          bench --site test_site install-app frutter_cicd
          bench build
        env:
          CI: 'Yes'

      # - name: Run Unit Tests
      #   working-directory: /home/runner/frappe-bench
      #   run: |
      #     pytest tests/
      #     find frutter_cicd/frutter_cicd/doctype/ -name 'test_*.py' -exec pytest {} \;
      - name: Run Unit Tests
        working-directory: /home/runner/frappe-bench
        run: |
          # Run pytest for all unit tests in the project
          pytest tests/

          # Find and run tests for all folders under frutter_cicd/frutter_cicd/doctype/
          for folder in frutter_cicd/frutter_cicd/doctype/*/; do
            if [[ -d "$folder" ]]; then
              find "$folder" -name 'test_*.py' -exec pytest {} +
            fi
          done


      # - name: Check for Test Cases
      #   working-directory: /home/runner/frappe-bench
      #   run: |
      #     changed_files=$(git diff --name-only HEAD^ HEAD)
      #     for file_name in $changed_files; do
      #       if [[ $file_name == *.py ]]; then
      #         base_name=$(basename $file_name .py)
      #         test_file="test_${base_name}.py"
      #         found_files=$(find . -name $test_file)
      #         if [[ -n $found_files ]]; then
      #           echo "Test file $test_file found."
      #         else
      #           echo "Test file $test_file not found."
      #           exit 1
      #         fi
      #       fi
      #     done
      #   env:
      #     CI: 'Yes'
      - name: Check for Test Cases
        working-directory: /home/runner/frappe-bench
        run: |
          changed_files=$(git diff --name-only HEAD^ HEAD)
          for file_name in $changed_files; do
            if [[ $file_name == *.py ]]; then
              base_name=$(basename $file_name .py)
              if [[ $base_name == test_* ]]; then
                echo "Test file $base_name.py found."
              else
                test_file="test_${base_name}.py"
                found_files=$(find . -name $test_file)
                if [[ -n $found_files ]]; then
                  echo "Test file $test_file found."
                else
                  echo "Test file $test_file not found."
                  exit 1
                fi
              fi
            fi
          done
        env:
          CI: 'Yes'

